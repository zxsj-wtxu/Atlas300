/**
* @file status.h
*
* Copyright (C) Huawei Technologies Co., Ltd. 2018-2019. All Rights Reserved.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*/

/*lint -e* */
#ifndef INC_HIAIENGINE_STATUS_H_
#define INC_HIAIENGINE_STATUS_H_

#include <stdio.h>

#ifdef __cplusplus
#include <string>
#include <map>
#include <mutex>
#include <vector>
#else
#include <stdint.h>
#endif

// lint -esym(551, *)
#ifdef __cplusplus
using HIAI_StatusT = uint32_t;
#else
typedef uint32_t HIAI_StatusT;
#endif

// 定义相关宏，对相关函数符号进行屏蔽
#ifndef HIAI_LIB_VISIBILITY
#if defined _WIN32 || defined __CYGWIN__
#if (defined(HIAIENGINE_MATRIX_DEVICE_LIB) & !defined(HIAIENGINE_MINI_RC))
#define HIAI_LIB_HOST_VISIBILITY
#else
#define HIAI_LIB_HOST_VISIBILITY __declspec(dllexport)
#endif
#if (defined(HIAIENGINE_MATRIX_HOST_LIB) & !defined(HIAIENGINE_MINI_RC))
#define HIAI_LIB_DEVICE_VISIBILITY
#else
#define HIAI_LIB_DEVICE_VISIBILITY __declspec(dllexport)
#endif
#define HIAI_LIB_VISIBILITY __declspec(dllexport)
#define HIAI_LIB_INTERNAL
#else
#if (defined(HIAIENGINE_MATRIX_DEVICE_LIB) & !defined(HIAIENGINE_MINI_RC))
#define HIAI_LIB_HOST_VISIBILITY  __attribute__ ((visibility ("hidden")))
#else
#define HIAI_LIB_HOST_VISIBILITY  __attribute__ ((visibility ("default")))
#endif
#if (defined(HIAIENGINE_MATRIX_HOST_LIB) & !defined(HIAIENGINE_MINI_RC))
#define HIAI_LIB_DEVICE_VISIBILITY  __attribute__ ((visibility ("hidden")))
#else
#define HIAI_LIB_DEVICE_VISIBILITY  __attribute__ ((visibility ("default")))
#endif
#define HIAI_LIB_VISIBILITY __attribute__ ((visibility ("default")))
#define HIAI_LIB_INTERNAL __attribute__ ((visibility ("hidden")))
#endif
#endif

enum {
    HIAI_DEBUG = 0,
    HIAI_INFO = 1,
    HIAI_WARNING = 2,
    HIAI_ERROR = 3,
    HIAI_FATAL = 4,
    HIAI_EVENT = 5,
};


enum {
    HIAI_OK_CODE = 0,
    HIAI_DEBUG_INFO_CODE,
    HIAI_GRAPH_WARNING_CODE,
    HIAI_GRAPH_OK_CODE,
    HIAI_GRAPH_GET_INSTANCE_NULL_CODE,
    HIAI_GRAPH_INIT_FAILED_CODE,
    HIAI_GRAPH_ID_EXIST_CODE,
    HIAI_GRAPH_SENDMSG_FAILED_CODE,
    HIAI_GRAPH_NOT_EXIST_CODE,
    HIAI_GRAPH_SEARFUNC_IS_NULL_CODE,
    HIAI_GRAPH_ENGINE_NOT_EXIST_CODE,
    HIAI_GRAPH_START_TIMEOUT_CODE,
    HIAI_GRAPH_DESTROY_TIMEOUT_CODE,
    HIAI_GRAPH_ENGINE_DESTROY_FAILED_CODE,
    HIAI_GRAPH_ENGINE_IS_NULL_CODE,
    HIAI_GRAPH_ENGINE_START_FAILED_CODE,
    HIAI_GRAPH_ENGINE_ID_SAME_CODE,
    HIAI_GRAPH_ENGINE_INIT_FAILED_CODE,
    HIAI_GRAPH_ENGINE_NOT_INITIALED_CODE,
    HIAI_GRAPH_CONNECT_ID_ERROR_CODE,
    HIAI_GRAPH_LOADSO_ERROR_CODE,
    HIAI_GRAPH_MODEL_PATH_WARNING_CODE,
    HIAI_GRAPH_SRC_PORT_NOT_EXIST_CODE,
    HIAI_GRAPH_CREATE_ENGINE_FAILED_CODE,
    HIAI_GRAPH_DATA_RECV_FUNCTOR_IS_NULL_CODE,
    HIAI_GRAPH_CONVCFUNC_IS_NULL_CODE,
    HIAI_GRAPH_PROTO_FILE_PARSE_FAILED_CODE,
    HIAI_GRAPH_REMOVE_DIR_FAILED_CODE,
    HIAI_GRAPH_CREATE_DIR_FAILED_CODE,
    HIAI_GRAPH_CREATE_DIR_TIMEOUT_CODE,
    HIAI_GRAPH_NOT_FOND_MEMORY_CODE,
    HIAI_GRAPH_WRONG_MEMORY_END_CODE,
    HIAI_GRAPH_WRONG_MEMORY_TYPE_CODE,
    HIAI_GRAPH_NO_USEFUL_MEMORY_CODE,
    HIAI_GRAPH_PA_VA_NOT_MATCH_CODE,
    HIAI_GRAPH_RELEASE_WRONG_ADDR_CODE,
    HIAI_GRAPH_INVALID_VALUE_CODE,
    HIAI_GRAPH_GET_PA_ADDR_FAILED_CODE,
    HIAI_GRAPH_ALLOC_BUFFER_FAILED_CODE,
    HIAI_GRAPH_FREE_HDC_BUFFER_FAILED_CODE,
    HIAI_GRAPH_NO_MEMORY_CODE,
    HIAI_GRAPH_MEMORY_POOL_INITED_CODE,
    HIAI_GRAPH_MEMORY_POOL_NOT_EXISTED_CODE,
    HIAI_MEMORY_NOT_SUPPORT_CODE,
    HIAI_GRAPH_TARGET_SIZE_ENOUGH_CODE,
    HIAI_GRAPH_MALLOC_SMALLER_CODE,
    HIAI_GRAPH_MALLOC_LARGER_CODE,
    HIAI_GRAPH_DATA_SIZE_WRONG_CODE,
    HIAI_MEMORY_POOL_UPDATE_FAILED_CODE,
    HIAI_PROFILE_WRONG_FILE_PATH_CODE,
    HIAI_QUEUE_STOPPED_CODE,
    HIAI_QUEUE_POP_FAILED_CODE,
    HIAI_QUEUE_PUSH_FAILED_CODE,
    HIAI_ENGINE_WAIT_TIMEOUT_CODE,
    HIAI_INVALID_SO_CODE,
    HIAI_MISS_CONFIG_FILE_CODE,
    HIAI_THREAD_NULL_CODE,
    HIAI_OUT_OF_RANGE_CODE,
    HIAI_ENGINE_NULL_POINTER_CODE,
    HIAI_PORT_ID_ERROR_CODE,
    HIAI_QUEUE_NOT_FIND_CODE,
    HIAI_QUEUE_CREATE_FAILED_CODE,
    HIAI_QUEUE_FULL_CODE,
    HIAI_QUEUE_EMPTY_CODE,
    HIAI_NOT_SET_SAVE_INTERFACE_CODE,
    HIAI_ENGINE_RUN_ARGS_NOT_RIGHT_CODE,
    HIAI_CHECK_ENGIN_DESC_ERROR_CODE,
    HIAI_EXCEED_MAX_THREAD_CODE,
    HIAI_WRONG_PRIORITY_CODE,
    HIAI_JOIN_TASK_ERROR_CODE,
    HIAI_ENGINE_FUNCTOR_NULL_CODE,
    HIAI_ENGINE_FUNCTOR_EXIST_CODE,
    HIAI_ENGINE_TIME_NOT_EQUAL_CODE,
    HIAI_ENGINE_CREATE_TASK_FAILED_CODE,
    HIAI_WARNING_SET_THREAD_NAME_FAILED_CODE,
    HIAI_HDC_INFO_CODE,
    HIAI_HDC_OK_CODE,
    HIAI_HDC_WARNING_CODE,
    HIAI_HDC_SEND_MSG_ERROR_CODE,
    HIAI_HDC_SEND_ERROR_CODE,
    HIAI_HDC_RECV_MSG_ERROR_CODE,
    HIAI_HDC_CLT_SEND_HEART_DETECT_ERROR_CODE,
    HIAI_HDC_SRV_INIT_ERROR_CODE,
    HIAI_HDC_SRV_CREATE_ERROR_CODE,
    HIAI_HDC_SRV_DESTROY_ERROR_CODE,
    HIAI_HDC_SRV_ACCEPT_ERROR_CODE,
    HIAI_HDC_SRV_CLOSED_ERROR_CODE,
    HIAI_HDC_SRV_CLOSE_CHILD_SESSION_ERROR_CODE,
    HIAI_HDC_SRV_CLOSE_SERVER_SESSION_ERROR_CODE,
    HIAI_HDC_SRV_HEART_BEAT_TIMEOUT_CODE,
    HIAI_HDC_CLT_UNINIT_ERROR_CODE,
    HIAI_HDC_CLT_INIT_ERROR_CODE,
    HIAI_MESSAGE_PARSE_ERROR_CODE,
    HIAI_HDC_SEG_SIZE_ERROR_CODE,
    HIAI_HDC_INPUT_PARAM_ERROR_CODE,
    HIAI_HDC_DRV_ERROR_CODE,
    HIAI_HDC_GET_INSTANCE_NULL_CODE,
    HIAI_PPC_WARNING_CODE,
    HIAI_PPC_DRIVER_INIT_FAIL_CODE,
    HIAI_PPC_SERVER_CLIENT_CREATE_FAIL_CODE,
    HIAI_PPC_SERVER_CLIENT_DESTORY_FAIL_CODE,
    HIAI_PPC_SERVER_CLOSE_CODE,
    HIAI_PPC_GET_SET_MSG_BUFFER_FAIL_CODE,
    HIAI_PPC_SESSION_CONNECT_FAIL_CODE,
    HIAI_PPC_SESSION_NOT_EXISTED_CODE,
    HIAI_PPC_SEND_RECEIVE_MSG_FAIL_CODE,
    HIAI_PPC_MSG_FREE_FAIL_CODE,
    HIAI_PPC_ALLOC_MSG_FAIL_CODE,
    HIAI_PPC_MSG_LEN_NOT_MATCH_CODE,
    HIAI_PPC_MSG_BUF_NULL_CODE,
    HIAI_INIT_FAIL_CODE,
    HIAI_HDC_INTERNAL_ERROR_CODE,
    HIAI_DAEMON_INFO_CODE,
    HIAI_DAEMON_ERROR_CODE,
    HIAI_DAEMON_SETUP_FAILED_CODE,
    HIAI_DAEMON_CREATE_HDC_ERROR_CODE,
    HIAI_DAEMON_BIND_CORE_ERROR_CODE,
    HIAI_NOTIFY_DAEMON_READY_ERROR_CODE,
    HIAI_BBOX_SET_COREDUMP_FILEPATH_FAILED_CODE,
    HIAI_BBOX_SET_COREDUMP_FILECOUNT_FAILED_CODE,
    HIAI_BBOX_REMOVE_COREDUMP_FILE_FAILED_CODE,
    HIAI_BBOX_REGISTERSIGNAL_FAILED_CODE,
    HIAI_BBOX_COREDUMP_FILE_CODE,
    HIAI_BBOX_LOAD_SYMBOL_FAILED_CODE,
    HIAI_PROFILE_INFO_CODE,
    HIAI_PROFILE_PRINT_PATH_INFO_CODE,
    HIAI_PROFILE_PRINT_FOLDER_ERROR_CODE,
    HIAI_PROFILE_PRINT_FILE_ERROR_CODE,
    HIAI_GRAPH_GET_VERSION_ERROR_CODE,
    HIAI_GRAPH_GET_DEVNUM_ERROR_CODE,
    HIAI_GRAPH_GET_GRAPHID_ERROR_CODE,
    HIAI_GRAPH_GET_DEVID_ERROR_CODE,
    HIAI_GRAPH_GET_PCIEINFO_ERROR_CODE,
    HIAI_GRAPH_HDC_CLIENT_ERROR_CODE,
    HIAI_GRAPH_START_PPC_SERVER_ERROR_CODE,
    HIAI_GRAPH_MAP_BUFFER_ERROR_CODE,
    HIAI_GRAPH_MMAP_ERROR_CODE,
    HIAI_GRAPH_UPDATE_CONFIG_FAILED_CODE,
    HIAI_FILE_SIZE_TOO_LARGE_CODE,
    HIAI_FILE_INVALID_PATH_CODE,
    HIAI_FILE_INVALID_NAME_CODE,
    HIAI_MEMORY_EXHAUSTED_CODE,
    HIAI_INTERGER_REVERSED_CODE,
    HIAI_GRAPH_MESSAGE_NULL_CODE,
    HIAI_PROFILE_SET_FAILED_CODE,
    HIAI_REPEATED_GRAPH_CODE,
    HIAI_REPEATED_ENGINE_CODE,
    HIAI_PORT_ID_NOT_EXIST_CODE,
    HIAI_ENGINE_ID_NOT_EXIST_CODE,
    HIAI_GRAPH_ID_NOT_EXIST_CODE,
    HIAI_FILE_NOT_EXIST_CODE,
    HIAI_GRAPH_CREATE_FILE_FAIL_CODE,
    HIAI_GRAPH_OPEN_FILE_FAIL_CODE,
    HIAI_GRAPH_READ_FILE_FAIL_CODE,
    HIAI_GRAPH_WRTIE_FILE_FAIL_CODE,
    HIAI_GRAPH_CLOSE_FILE_FAIL_CODE,
    HIAI_GRAPH_ALREADY_USED_IN_ANOTHER_PROCESS_CODE,
    HIAI_HDC_SESSION_DEAD_CODE,
    HIAI_NPU_POWER_OFF_CODE,
    HIAI_POWER_STATE_CALLBACK_REGISTER_ERROR_CODE,
    HIAI_POWER_STATE_CALLBACK_PROCESS_ERROR_CODE,
    HIAI_POWER_STATE_DUPLICATE_CALLBACK_CODE,
    HIAI_DEVICE_POWER_STATE_CODE,
    HIAI_MEMORY_STATUS_ERROR_CODE,
    HIAI_TRAN_UNKNOWN_RSP_CODE,
    HIAI_TRAN_TIMEOUT_CODE,
    HIAI_TRAN_NOT_EXIST_CODE,
    HIAI_GRAPH_REMOVE_FILE_FAILED_CODE,
    HIAI_MEMORY_POOL_INVALID_ADDR_CODE,
    HIAI_MEMORY_POOL_RESIZE_FAILED_CODE,
    HIAI_GRAPH_MEMORY_POOL_INIT_FAILED_CODE,
    HIAI_GRAPH_HDC_MEMORY_ADDR_NOT_ALIGN_CODE,
    HIAI_GRAPH_MEMORY_POOL_STOPPED_CODE,
    HIAI_GRAPH_SET_PUBLIC_KEY_FAILED_CODE,
    HIAI_GRAPH_HARDWARE_DECRYPTION_FAILED_CODE,
    HIAI_GRAPH_SIGNATURE_DECRYPTION_FAILED_CODE,
    HIAI_GRAPH_READ_BIN_FAILED_CODE,
    HIAI_EXCEPTION_CODE,
    HIAI_USER_INPUT_TENSOR_SIZE_TOO_LARGE_CODE,
    HIAI_GET_ENGINE_FAILED_CODE,
    HIAI_CHECK_UPDATE_CONFIG_FAILED_CODE,
    HIAI_POWER_STATE_CALLBACK_REGISTER_WARNING_CODE,
    HIAI_PY_NOT_INITIALNIZED_CODE,
    HIAI_PY_DATA_RECV_CALLBACK_NULL_CODE,
    HIAI_PY_DATA_RECV_MESSAGE_NULL_CODE,
    HIAI_PY_DATA_RECV_CALLBACK_UNCALLABLE_CODE,
    HIAI_PY_DATA_RECV_CALLBACK_ERROR_CODE,
    HIAI_DFREE_FAILED_CODE,
    HIAI_BUFFER_SIZE_OVER_DMALLOC_SIZE_CODE,
    HIAI_SYS_FREE_MEMORY_WARNING_CODE,
    HIAI_NNTENSORLIST_TO_PYTHON_ERROR_CODE,
    HIAI_NNTENSORLIST_TO_CPLUSPLUS_ERROR_CODE,
    HIAI_MMAP_MAP_ITEM_NOT_EXIST_CODE,
    HIAI_MMAP_MAP_ERASE_FAILED_CODE,
    HIAI_MUNMAP_FAILED_CODE,
    HIAI_MMAP_MAP_INSERT_FAILED_CODE,
    HIAI_UNPACK_AI_FILE_FAILED_CODE,
    HIAI_STATUS_CODE_TOTAL
};
/**
* @ingroup hiaiengine
* @brief 注册模块id：0xAABB，AA表示系统级编号，BB表示模块级编号
*/
#define MODID_GRAPH     0x0101  // HiAIEngine Graph模块ID
#define MODID_ENGINE    0x0102  // HiAIEngine Engine模块ID
#define MODID_HDC       0x0103  // HiAIEngine HDC
#define MODID_OTHER     0x0104  // 不属于模块代码中的错误
#define MODID_PROFILE   0x0106  // 不属于模块代码中的错误
#define MODID_PPC       0x0105  // HiAIEngine PPC

/**
* @ingroup hiaiengine
* @brief 注册错误码
* @param [in]moduleId 模块ID
* @param [in]logLevel 错误级别
* @param [out]CODE_NAME 错误码的名称
* @param [in]codeDesc 错误码的描述，字符串
*/
#ifdef  __cplusplus
    #define HIAI_DEF_ERROR_CODE(moduleId, logLevel, CODE_NAME, codeDesc) \
        constexpr HIAI_StatusT CODE_NAME = \
            ( (0xFFFF & ((uint16_t)moduleId)) << 16) \
            | (0xF000 & ((uint16_t)logLevel) << 12) \
            | (0x0FFF & (CODE_NAME##_CODE));\
        const hiai::ErrorNoRegisterar g_##CODE_NAME##_errorno( \
            CODE_NAME, codeDesc);
#else
    #define HIAI_DEF_ERROR_CODE(moduleId, logLevel, CODE_NAME, codeDesc) \
        static const HIAI_StatusT CODE_NAME = \
            ( (0xFFFF & ((uint16_t)moduleId)) << 16) \
            | (0xF000 & ((uint16_t)logLevel) << 12) \
            | (0x0FFF & CODE_NAME##_CODE);
#endif

/**
* @ingroup hiaiengine
* @brief 获取错误级别
* @param [in]CODE_NAME 错误码
* @param [out]codeDesc 错误码的描述字符串
*/
#define HIAI_GET_ERROR_LEVEL(CODE_NAME) ((CODE_NAME & 0x0000F000) >> 12)

#ifdef  __cplusplus
    #define HIAI_GET_ERROR_STR(CODE_NAME)   \
                (hiai::StatusFactory::GetInstance()->GetErrDesc(CODE_NAME))
#endif

#define HIAI_API_MAX_SUB_VERSION 100
static const int32_t HIAI_INVAILED_DEVICE_ID = 0xFFFFFFFF;

typedef enum hai_api_version
{
    HIAI_API_VERSION_V1_00 = 100,
    HIAI_API_VERSION_V1_01 = 101,
    HIAI_API_VERSION_V2_00 = 200
} HIAI_API_VERSION;

#ifdef  __cplusplus
namespace hiai {
    class StatusFactory {
      public:
        /**
        * @ingroup hiaiengine
        * @brief 获取StatusFactory的指针
        * @param [in]:
        * @return StatusFactory的指针
        */
        HIAI_LIB_VISIBILITY static StatusFactory* GetInstance();

        /**
        * @ingroup hiaiengine
        * @brief 注册错误码
        * @param [in]err 错误码
        * @param [in]desc 错误码的描述字符串
        */
        HIAI_LIB_VISIBILITY void RegisterErrorNo(const uint32_t err,
            const std::string& desc);

        /**
        * @ingroup hiaiengine
        * @brief 获取错误码描述字符串
        * @param [in]err 错误码
        */
        HIAI_LIB_INTERNAL std::string GetErrDesc(const uint32_t err);

        /**
        * @ingroup hiaiengine
        * @brief 静态函数：获取错误码描述字符串
        * @param [in]err 错误码
        * return : 有问题则返回空字符串“”
        */
        HIAI_LIB_INTERNAL static std::string GetErrCodeDesc(uint32_t errCode);
      protected:

        /**
        * @ingroup hiaiengine
        * @brief 构造函数
        * @param [in] void
        */
        HIAI_LIB_INTERNAL StatusFactory();

        /**
        * @ingroup hiaiengine
        * @brief 析构函数
        * @param [in] void
        */
        HIAI_LIB_INTERNAL ~StatusFactory() {}

        HIAI_LIB_INTERNAL StatusFactory(const StatusFactory&) = delete;
        HIAI_LIB_INTERNAL StatusFactory(StatusFactory&&) = delete;
        HIAI_LIB_INTERNAL StatusFactory& operator=(const StatusFactory&) = delete;
        HIAI_LIB_INTERNAL StatusFactory& operator=(StatusFactory&&) = delete;

        HIAI_LIB_INTERNAL static std::mutex& GetMutex();
      private:
        std::mutex rwMutex_;
        std::map<uint32_t, std::string> errDesc_;
    };

    class ErrorNoRegisterar {
      public:
        /**
        * @ingroup hiaiengine
        * @brief 注册错误码
        * @param [in]err 错误码
        * @param [in]desc 对于注册错误码的描述内容
        */
        HIAI_LIB_INTERNAL ErrorNoRegisterar(const uint32_t& err,
                                            const std::string& desc) {
            StatusFactory::GetInstance()->RegisterErrorNo(err, desc);
        }

        HIAI_LIB_INTERNAL ~ErrorNoRegisterar() {}
        HIAI_LIB_INTERNAL ErrorNoRegisterar(const ErrorNoRegisterar&) = delete;
        HIAI_LIB_INTERNAL ErrorNoRegisterar(ErrorNoRegisterar&&) = delete;
        HIAI_LIB_INTERNAL ErrorNoRegisterar& operator=(const ErrorNoRegisterar&) = delete;
        HIAI_LIB_INTERNAL ErrorNoRegisterar& operator=(ErrorNoRegisterar&&) = delete;
    };
}
#endif

// register error code
// 创建HIAI_OK
// lint -esym(551, HIAI_StatusT)
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_INFO, HIAI_OK, "running ok");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_DEBUG, HIAI_DEBUG_INFO, "debug info");
// lint +esym(551, HIAI_StatusT)

/*********************GRAPH****************************/
// 创建GRAPH info级别
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_INFO, HIAI_GRAPH_OK, "graph running ok");

// 创建GRAPH warning 级别错误
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_WARNING, HIAI_GRAPH_WARNING, \
    "HIAI Graph warning");

// 创建GRAPH error级别错误
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_GET_INSTANCE_NULL, \
    "get instance null");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_INIT_FAILED, \
    "init failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_ID_EXIST, \
    "graph id exist when create");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_SENDMSG_FAILED, \
    "hdc send msg failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_NOT_EXIST, \
    "graph not exist");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_SEARFUNC_IS_NULL, \
    "serarfunc is null");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_ENGINE_NOT_EXIST, \
    "engine not exist");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_START_TIMEOUT, \
    "start timeout");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_DESTROY_TIMEOUT, \
    "destroy timeout");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, \
    HIAI_GRAPH_ENGINE_DESTROY_FAILED, \
    "engine destroy failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_ENGINE_IS_NULL, \
    "id exist, engine is null");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_ENGINE_START_FAILED, \
    "engine start failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_ENGINE_ID_SAME, \
    "cfg has two engine with same id");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_ENGINE_INIT_FAILED, \
    "engine init failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_ENGINE_NOT_INITIALED, \
    "engine has not initialed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_CONNECT_ID_ERROR, \
    "connect id error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_LOADSO_ERROR, \
    "load so error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_WARNING, HIAI_GRAPH_MODEL_PATH_WARNING, \
    "ai model path warning");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_WARNING, HIAI_GRAPH_SRC_PORT_NOT_EXIST, \
    "src port not exist");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_CREATE_ENGINE_FAILED, \
    "HIAIEngineFactory create null engine");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, \
    HIAI_GRAPH_DATA_RECV_FUNCTOR_IS_NULL, \
    "HIAI_SetDataRecvFunctor callback is null");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_CONVCFUNC_IS_NULL, \
    " GetConvcFunc is null");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, \
    HIAI_GRAPH_PROTO_FILE_PARSE_FAILED, \
    "ParseFromString return failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_REMOVE_DIR_FAILED, \
    "remove dir return failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_CREATE_DIR_FAILED, \
    "create dir return failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_CREATE_DIR_TIMEOUT, \
    "create dir timeout");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_NOT_FOND_MEMORY, \
    "can't find the memory");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_WRONG_MEMORY_END, \
    "memory end is wrong");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_WRONG_MEMORY_TYPE, \
    "memory type is wrong");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_NO_USEFUL_MEMORY, \
    "no useful memory");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_PA_VA_NOT_MATCH, \
    "pa va not match");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_RELEASE_WRONG_ADDR, \
    "release wrong address");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_INVALID_VALUE, \
    "graph invalid value");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_GET_PA_ADDR_FAILED, \
    "get pa address failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_ALLOC_BUFFER_FAILED, \
    "alloc buffer failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, \
    HIAI_GRAPH_FREE_HDC_BUFFER_FAILED, \
    "free hdc buffer failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_NO_MEMORY, \
    "no memory");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_MEMORY_POOL_INITED, \
    "memory pool has inited");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, \
    HIAI_GRAPH_MEMORY_POOL_NOT_EXISTED, \
    "memory pool is not existed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_MEMORY_NOT_SUPPORT, \
    "malloc too large buffer, not support");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_TARGET_SIZE_ENOUGH, \
    "target data buffer not enough");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_MALLOC_SMALLER, \
    "failed to malloc buffer due to the size smaller than 256K");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_MALLOC_LARGER, \
    "failed to malloc buffer due to the size larger than 128M");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_GRAPH_DATA_SIZE_WRONG, \
    "data size is wrong");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_MEMORY_POOL_UPDATE_FAILED, \
    "failed to update memory pool");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_PROFILE_WRONG_FILE_PATH, \
    "wrong file path");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_POWER_STATE_CALLBACK_REGISTER_ERROR, \
    "call user callback function register or unregister failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_POWER_STATE_CALLBACK_PROCESS_ERROR, \
    "call user callback function process failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_POWER_STATE_DUPLICATE_CALLBACK, \
    "powerstate callback is duplicated");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_UNPACK_AI_FILE_FAILED, \
    "unpack ai file failed");

/*********************ENGINE****************************/
// 创建EGINE info级别
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_INFO, HIAI_QUEUE_STOPPED, \
    "queue has been stopped");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_INFO, HIAI_QUEUE_POP_FAILED, \
    "failed to pop data from queue");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_INFO, HIAI_QUEUE_PUSH_FAILED, \
    "failed to push data from queue");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_INFO, HIAI_ENGINE_WAIT_TIMEOUT, \
    "engine wait data timeout");

// 创建EGINE warning 级别
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_WARNING, HIAI_WARNING_SET_THREAD_NAME_FAILED, \
    "failed to set thread name");


// 创建EGINE error级别错误
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_INVALID_SO, \
    "invalid so file");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_MISS_CONFIG_FILE, \
    "configuration file miss");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_THREAD_NULL, \
    "create wrong thread");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_OUT_OF_RANGE, \
    "engine desc thread_number or priority out of range");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_ENGINE_NULL_POINTER, \
    "null pointer");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_PORT_ID_ERROR, \
    "port id error");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_QUEUE_CREATE_FAILED, \
    "queue create fail");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_QUEUE_NOT_FIND, \
    "queue not find");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_QUEUE_FULL, \
    "queue is full");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_QUEUE_EMPTY, \
    "queue is empty");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_NOT_SET_SAVE_INTERFACE, \
    "not set save interface");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_ENGINE_RUN_ARGS_NOT_RIGHT, \
    "the args not right");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_CHECK_ENGIN_DESC_ERROR, \
    "check engine desc error");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_EXCEED_MAX_THREAD, \
    "check engine desc error");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_WRONG_PRIORITY, \
    "wrong priority");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_JOIN_TASK_ERROR, \
    "join task failed");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_ENGINE_FUNCTOR_NULL, \
    "hiai engine function is null");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_WARNING, HIAI_ENGINE_FUNCTOR_EXIST, \
    "hiai engine function is existed");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_ENGINE_TIME_NOT_EQUAL, \
    "hiai engine time size not equal");
HIAI_DEF_ERROR_CODE(MODID_ENGINE, HIAI_ERROR, HIAI_ENGINE_CREATE_TASK_FAILED, \
    "hiai engine create task failed");




/********************* HDC ****************************/
// 创建EGINE info级别
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_INFO, HIAI_HDC_INFO, \
    "HIAI HDC info");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_INFO, HIAI_DEVICE_POWER_STATE, \
    "HIAI Device power state");

// 创建HDC warning级别错误
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_WARNING, HIAI_HDC_WARNING, \
    "HIAI HDC warning");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_WARNING, HIAI_NPU_POWER_OFF, \
    "NPU is Off");

// 创建EGINE error级别错误
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_OK, \
    "ok");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SEND_MSG_ERROR, \
    "send msg error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SEND_ERROR, \
    "send failed");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_RECV_MSG_ERROR, \
    "recv msg error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, \
    HIAI_HDC_CLT_SEND_HEART_DETECT_ERROR, \
    "hdc client send heart detect error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SRV_INIT_ERROR, \
    "hdc server init error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SRV_CREATE_ERROR, \
    "hdc server create error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SRV_DESTROY_ERROR, \
    "hdc server destroy error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SRV_ACCEPT_ERROR, \
    "hdc server accept error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SRV_CLOSED_ERROR, \
    "hdc server closed error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, \
    HIAI_HDC_SRV_CLOSE_CHILD_SESSION_ERROR, \
    "hdc server close child session error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, \
    HIAI_HDC_SRV_CLOSE_SERVER_SESSION_ERROR, \
    "hdc server close server session error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SRV_HEART_BEAT_TIMEOUT, \
    "hdc server heart beat timeout");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_CLT_UNINIT_ERROR, \
    "hdc client uninit error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_CLT_INIT_ERROR, \
    "hdc client init error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_MESSAGE_PARSE_ERROR, \
    "hdc message parse error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_SEG_SIZE_ERROR, \
    "hiai seg size error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_INPUT_PARAM_ERROR, \
    "hiai input parameter error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_DRV_ERROR, \
    "hiai drv return error");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR, HIAI_HDC_GET_INSTANCE_NULL, \
    "hiai hdc server get instance error");

/********************* PPC ****************************/
// PPC warning code
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_WARNING, HIAI_PPC_WARNING, \
    "PPC warning");

// 创建PPC error级别错误
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_DRIVER_INIT_FAIL, \
    "Init PPC driver fail");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, \
    HIAI_PPC_SERVER_CLIENT_CREATE_FAIL, \
    "Create PPC server or PPC client fail");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, \
    HIAI_PPC_SERVER_CLIENT_DESTORY_FAIL, \
    "Destory PPC server or PPC client fail");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_SERVER_CLOSE, \
    "PPC server is closed");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_GET_SET_MSG_BUFFER_FAIL, \
    "PPC get or set msg buffer fail");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_SESSION_CONNECT_FAIL, \
    "PPC connect is failed");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_SESSION_NOT_EXISTED, \
    "PPC session is not existed");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_SEND_RECEIVE_MSG_FAIL, \
    "PPC send or receive msg fail");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_MSG_FREE_FAIL, \
    "PPC msg free fail");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_ALLOC_MSG_FAIL, \
    "PPC alloc memory for msg fail");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_MSG_LEN_NOT_MATCH, \
    "PPC message length not match");
HIAI_DEF_ERROR_CODE(MODID_PPC, HIAI_ERROR, HIAI_PPC_MSG_BUF_NULL, \
    "PPC message buffer is null");


/*********************INIT****************************/
// 创建other info级别
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_INFO, HIAI_BBOX_COREDUMP_FILE,
    "coredump info");

// 创建other warning级别错误
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_WARNING, HIAI_BBOX_LOAD_SYMBOL_FAILED,
    "load proc_bbox so failed");

// 创建other error级别错误
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_INIT_FAIL,
    "hiai init fail");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_HDC_INTERNAL_ERROR,
    "hdc fail");

HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_INFO, HIAI_DAEMON_INFO,
    "hiai daemon info");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_INFO, HIAI_DAEMON_ERROR,
    "hiai daemon error");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_DAEMON_SETUP_FAILED,
    "hiai daemon setup failed");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_DAEMON_CREATE_HDC_ERROR, \
    "hiai deamon create hdc error");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_DAEMON_BIND_CORE_ERROR, \
    "hiai deamon bind core error");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_NOTIFY_DAEMON_READY_ERROR, \
    "hiai notify matrix daemon ready error");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_BBOX_SET_COREDUMP_FILEPATH_FAILED,
    "set coredump file path failed");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_BBOX_SET_COREDUMP_FILECOUNT_FAILED,
    "set coredump file count failed");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_BBOX_REMOVE_COREDUMP_FILE_FAILED,
    "failed to remove coredump file");
HIAI_DEF_ERROR_CODE(MODID_OTHER, HIAI_ERROR, HIAI_BBOX_REGISTERSIGNAL_FAILED,
    "register signal failed");


/********************* PROFILE ****************************/
// 创建EGINE info级别
HIAI_DEF_ERROR_CODE(MODID_PROFILE, HIAI_INFO, HIAI_PROFILE_INFO,
    "HIAI PROFILE info");
HIAI_DEF_ERROR_CODE(MODID_PROFILE, HIAI_INFO, HIAI_PROFILE_PRINT_PATH_INFO,
    "profile print path info");
// 创建EGINE warning级别错误


// 创建EGINE error级别错误
HIAI_DEF_ERROR_CODE(MODID_PROFILE, HIAI_ERROR,
    HIAI_PROFILE_PRINT_FOLDER_ERROR,
    "profile print folder error");
HIAI_DEF_ERROR_CODE(MODID_PROFILE, HIAI_ERROR,
    HIAI_PROFILE_PRINT_FILE_ERROR,
    "profile print file error");

HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_GET_VERSION_ERROR, "get api version error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_GET_DEVNUM_ERROR, "get device number error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_GET_GRAPHID_ERROR, "get graph id error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_GET_DEVID_ERROR, "get device id error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_START_PPC_SERVER_ERROR, "start ppc server error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_MAP_BUFFER_ERROR, "map dma buffer error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_MMAP_ERROR, "mmap buffer error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_HDC_CLIENT_ERROR, "hdc client error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_GET_PCIEINFO_ERROR, "get PCIe info error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_UPDATE_CONFIG_FAILED, "Update config failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_MESSAGE_NULL, "Message input is null");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_PROFILE_SET_FAILED, "Set profile failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_REPEATED_GRAPH, "Repeated graph");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_REPEATED_ENGINE, "Repeated engine");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_PORT_ID_NOT_EXIST, "Port is not existed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_ENGINE_ID_NOT_EXIST, "Engine is not existed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_ID_NOT_EXIST, "Graph is not existed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_FILE_NOT_EXIST, "File is not existed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_CREATE_FILE_FAIL, "create file failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_OPEN_FILE_FAIL, "open file failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_READ_FILE_FAIL, "read file failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_WRTIE_FILE_FAIL, "write file failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_CLOSE_FILE_FAIL, "close file failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_ALREADY_USED_IN_ANOTHER_PROCESS,
    "directory already used in another file failed");
HIAI_DEF_ERROR_CODE(MODID_HDC, HIAI_ERROR,
    HIAI_HDC_SESSION_DEAD,
    "drv hdc session dead");

// 创建other fatal级别错误
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_USER_INPUT_TENSOR_SIZE_TOO_LARGE, \
    "user input tensorDimVec size is over the range");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_FILE_SIZE_TOO_LARGE, "file size is too large");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_FILE_INVALID_PATH, "file path is invalid");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_FILE_INVALID_NAME, "file name is invalid");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_MEMORY_EXHAUSTED, "memory exhausted error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_INTERGER_REVERSED, "interger reached reverse");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_MEMORY_STATUS_ERROR, "memory status error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_TRAN_UNKNOWN_RSP, "transcation status error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_TRAN_TIMEOUT, "transcation time out");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_TRAN_NOT_EXIST, "transcation requst id is not exist");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_REMOVE_FILE_FAILED, "remove file error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_MEMORY_POOL_INVALID_ADDR, "invalid address");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_MEMORY_POOL_RESIZE_FAILED, "invalid address");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_MEMORY_POOL_INIT_FAILED, "memory pool init failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_HDC_MEMORY_ADDR_NOT_ALIGN, "memory pool address not align");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_INFO,
    HIAI_GRAPH_MEMORY_POOL_STOPPED, "memory pool has been stopped");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_SET_PUBLIC_KEY_FAILED, "set public key failed in signature encryption");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_HARDWARE_DECRYPTION_FAILED, "hardware decryption failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_SIGNATURE_DECRYPTION_FAILED, "signature decryption failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GRAPH_READ_BIN_FAILED, "read bin file failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_EXCEPTION, "exception catched");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_GET_ENGINE_FAILED, "return nullptr when call getengine function");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR,
    HIAI_CHECK_UPDATE_CONFIG_FAILED, "check update config failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_WARNING, HIAI_POWER_STATE_CALLBACK_REGISTER_WARNING, \
    "power state callback function does not register");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_DFREE_FAILED, \
    "DFree failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_BUFFER_SIZE_OVER_DMALLOC_SIZE, \
    "Buffer size is lager than DMalloc size");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_WARNING, HIAI_SYS_FREE_MEMORY_WARNING, \
    "system free memory warning");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_NNTENSORLIST_TO_PYTHON_ERROR, \
    "c plus plus nntensorlist convert to python error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_NNTENSORLIST_TO_CPLUSPLUS_ERROR, \
    "python convert to c plus plus nntensorlist error");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_MMAP_MAP_ITEM_NOT_EXIST, \
    "item to be found not exist in mmapMap_");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_MMAP_MAP_ERASE_FAILED, \
    "mmapMap_ erase item failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_MUNMAP_FAILED, \
    "munmap failed");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_MMAP_MAP_INSERT_FAILED, \
    "mmapMap_ insert item failed");

/********************* PYTHON ****************************/
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_PY_NOT_INITIALNIZED, \
    "python is not initialized");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_PY_DATA_RECV_CALLBACK_NULL, \
    "data recv callback function is null");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_PY_DATA_RECV_MESSAGE_NULL, \
    "data recv message is null");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_PY_DATA_RECV_CALLBACK_UNCALLABLE, \
    "data recv callback is uncallable");
HIAI_DEF_ERROR_CODE(MODID_GRAPH, HIAI_ERROR, HIAI_PY_DATA_RECV_CALLBACK_ERROR, \
    "data recv callback return null");
// lint +esym(551, *)
#endif  // INC_HIAIENGINE_STATUS_H_
